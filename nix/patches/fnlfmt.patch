diff --git a/cli.fnl b/cli.fnl
index 069a2f0..55c2e75 100644
--- a/cli.fnl
+++ b/cli.fnl
@@ -5,7 +5,11 @@
 (local {: format-file : version} (require :fnlfmt))
 
 (fn help []
-  (print "Usage: fnlfmt [--no-comments] [--fix] [--check] FILENAME...")
+  (print "Usage: fnlfmt [--no-comments] [--custom-body-forms LIST] [--fix] [--check] FILENAME...")
+  (print "With the --custom-body-forms argument, formats extra forms")
+  (print "as body forms such like those starting with `with-` or `def`.")
+  (print "The custom body forms are specified by LIST, a comma separated list")
+  (print "of symbols each of which begins each custom body form.")
   (print "With the --fix or --check argument, multiple files can be specified.")
   (print "With the --fix argument, formats all the files in-place;")
   (print "with the --check argument, only checks if all the files are formatted;")
@@ -16,7 +20,15 @@
 (for [i (length arg) 1 -1]
   (when (= :--no-comments (. arg i))
     (set options.no-comments true)
-    (table.remove arg i)))
+    (table.remove arg i))
+  (when (= :--custom-body-forms (. arg i))
+    (table.remove arg i)
+    (set options.custom-body-forms
+         (let [comma-separated-symbols (table.remove arg i)
+               symbols-set {}]
+           (each [s (string.gmatch comma-separated-symbols "[^,]+")]
+             (tset symbols-set s true))
+           symbols-set))))
 
 (fn check-file [filename]
   (let [old (with-open [in (assert (io.open filename))] (in:read :*a))
diff --git a/fnlfmt.fnl b/fnlfmt.fnl
index 07d6d5c..103710f 100644
--- a/fnlfmt.fnl
+++ b/fnlfmt.fnl
@@ -264,9 +264,15 @@ number of handled arguments."
 
 (local renames {"#" :length "~=" :not=})
 
+(var custom-body-forms-patterns nil)
+
 (fn body-form? [callee]
   (or (?. syntax callee :body-form?) (callee:find "%.with-")
-      (callee:find :^with-) (callee:find "%.def") (callee:find :^def)))
+      (callee:find :^with-) (callee:find "%.def") (callee:find :^def)
+      (and custom-body-forms-patterns
+           (accumulate [ok? false _ p (ipairs custom-body-forms-patterns) &until ok?]
+             (or (callee:find (.. "^" p))
+                 (callee:find (.. "%." p)))))))
 
 (fn view-list [t view inspector start-indent]
   (if (. sugars (tostring (. t 1)))
@@ -389,8 +395,13 @@ When f returns a truthy value, recursively walks the children."
   (io.stderr:write (string.format "File not found: %s\n" filename))
   (os.exit 1))
 
-(fn format-file [filename {: no-comments}]
+(fn format-file [filename {: no-comments : custom-body-forms}]
   "Read source from a file and return formatted source."
+  (when (and custom-body-forms (not custom-body-forms-patterns))
+    (set custom-body-forms-patterns
+         (let [escape-regex #(string.gsub $ "([%^%$%(%)%%%.%[%]%*%+%-%?])" "%%%1")]
+           (icollect [s _ (pairs custom-body-forms)]
+             (escape-regex s)))))
   (let [f (match filename
             "-" io.stdin
             _ (or (io.open filename :r) (abort filename)))
